#!/usr/bin/perl 

use strict;
use warnings;

use Archive::Tar qw//;
use File::Find qw/find/;
use Digest::MD5 qw/md5_hex/;
use Getopt::Long qw/GetOptions/;
use File::Temp qw//;
use File::Copy qw/copy/;
use File::Path qw/mkpath rmtree/;
use Cwd qw/cwd/;
use Sys::Hostname qw/hostname/;

use constant SPECFILE => 'nail.spec';
use constant SUMSFILE => '.nailsums';
use constant METAFILE => '.nailmeta';
use constant VERSIONFILE => '.nailversion';

my @META_FIELDS = qw(
    Author
    Packager
    Description
    Homepage
);

my @META_RO = qw(
    Built
    VCS
);

my $FORCE = 0;
my $REVERSE = 0;
my $VCS = '';

GetOptions(
    force => \$FORCE,
    reverse => \$REVERSE,
    'vcs:s' => \$VCS,
);
main(@ARGV);

sub main {
    my ($operation, @args) = @_;

    $operation ||= '';

    if ($operation eq 'package') {
	make_package(@args);
    } elsif ($operation eq 'install') {
	install_package(@args);
    } elsif ($operation eq 'remove') {
	remove_package(@args);
    } elsif ($operation eq 'list') {
	list_package(@args);
    } elsif ($operation eq 'diff') {
	diff_package(@args);
    } elsif ($operation eq 'status') {
	status_package(@args);
    } elsif ($operation eq 'info') {
	info_package(@args);
    } else {
	usage();
	exit -1;
    }
}

sub usage {
    print STDERR <<EOF;
Usage: $0 <command> [args]
    package [--vcs={svn|cvs|git|hg}] <VCS module> <VCS tag>
    list <package file|URL to package file>
    info <package file|URL to package file>
    status
    diff [--reverse] <package file|URL to package file>
    install <package file|URL to package file> [install directory]
    remove [install directory]
EOF
}

sub make_package {
    my ($name, $tag) = @_;

    die "Name not set\n" unless $name;
    die "Tag not set\n" unless $tag;

    $VCS = $VCS || $ENV{COFIN_VCS} || 'cvs';

    my $cwd = cwd();
    chdir '/tmp';

    if (lc $VCS eq 'cvs') {
	eval {
	    require Cvs;
	};

	if ($@) {
	    if ($FORCE) {
		print STDERR "Using shell cvs\n";
		system qw/cvs co -r/, $tag, $name;
		chdir $name;
	    } else {
		die "Cvs perl module not installed, use --force to fallback to shell CVS\n";
	    }
	} else {
	    no warnings 'once';
	    my $cvs = Cvs->new($name, cvsroot => $ENV{CVSROOT}) or die "$Cvs::ERROR\n";
	    use warnings 'all';
	    $cvs->checkout($name, {revision => $tag, reset => 0}) or die "Could not check out revision $tag\n";
	    chdir $name;
	}
    } elsif (lc $VCS eq 'svn') {
	my $url = $tag;	
	($tag) = $url =~ /([^\/]+?)$/g;

	eval {
	    require SVN::Client;
	};

	if ($@) {
	    if ($FORCE) {
		print STDERR "Using shell svn\n";
		system qw/svn co/, $url, $name;
		chdir $name;
	    } else {
		die "SVN::Client perl module not installed, use --force to fallback to shell SVN\n";
	    }
	} else {
	    my $svn = new SVN::Client(
		auth => [
		    SVN::Client::get_simple_provider(),
		    #SVN::Client::get_simple_prompt_provider(\&simple_prompt,2),
                    SVN::Client::get_username_provider()
		]
            );	    

	    $svn->checkout($url, $name, 'HEAD', 1);
	    chdir $name;
	}
    } elsif (lc $VCS eq 'git') {
	my $repos = $name;

	($name) = $repos =~ /([^\/]+?)\.git\/?$/g;

	die "Could not resolve git repository name\n" unless $name;

	eval {
	    die "TODO: find standard git perl client\n";
	};

	if ($@) {
	    if ($FORCE) {
		print STDERR "Using shell git\n";
		system qw/git clone/, $repos;
		chdir $name;
		system qw/git checkout/, $tag;
	    } else {
		die "git perl module not installed, use --force to fallback to shell git\n";
	    }
	} else {
	    die "TODO: find standard git perl client\n";
	}
    } elsif (lc $VCS eq 'hg') {
	my $repos = $name;

	($name) = $repos =~ /([^\/]+?)$/g;

	die "Could not resolve hg repository name\n" unless $name;

	eval {
	    die "TODO: find standard hg perl client\n";
	};

	if ($@) {
	    if ($FORCE) {
		print STDERR "Using shell hg\n";
		system qw/hg clone/, $repos;
		chdir $name;
		system qw/hg checkout -r/, $tag;
	    } else {
		die "hg perl module not installed, use --force to fallback to shell hg\n";
	    }
	} else {
	    die "TODO: find standard hg perl client\n";
	}
    } else {
	die "Unknown --vcs option `$VCS'\n";
    }

    my $outfilename = "$name-$tag.nail";

    my $spec = {};
    open my $fh, '<', SPECFILE or warn "Could not load spec file: `$!'; using defaults";

    my $ops = {
        '+' => 'add',
        '-' => 'exclude',
        '~' => 'match_exclude',
    };

    my $fields = join '|', @META_FIELDS; 
    while (my $line = <$fh>) {
        chomp $line;

        if ($line =~ /^#/) {
        } elsif ($line =~ /^($fields)\:\s*(.+?)$/) {
            $spec->{cfg}->{$1} = $2;
        } elsif ($line =~ /^\s*([\-\+\~])\s*(.+?)\/*$/) {
            my $op = $ops->{$1};

            die "Unknown operation `$1'\n" unless $op;

            $spec->{$op}->{$2} = 1;
        }
    }

    close $fh;

    my $nail = Archive::Tar->new();
    my %files = ();

    foreach my $file (keys %{$spec->{add}}) {
        find(
	    sub {
		my $curfile = $File::Find::name;
		my $curdir = $File::Find::dir;

		return if $_ eq SPECFILE;
		return if $_ =~ /\.nail$/;

		if ($spec->{exclude}->{$curfile}) {
		    $File::Find::prune = 1;
		    return;
		}

		foreach my $test (keys %{$spec->{match_exclude}}) {
		    return if $curfile =~ /$test/;
		}

		return if $curfile eq '.' or $curfile eq './';

		$files{$curfile} = 1;

		$curdir =~ s/\/+$//g;
		if ($curdir ne '.') {
		    $files{$curdir} = 1;
		}
            },
            $file
        );
    }

    my $checksums = '';
    foreach my $file (keys %files) {
	next if $file eq '.' or $file eq './';

	print "$file\n";

        $nail->add_files($file);
	my $checksum = checksum($file);
	$checksums .= "$checksum $file\n";
    }

    my $metadata = '';
    foreach my $field (@META_FIELDS) {
	my $value = $spec->{cfg}->{$field} || '';

	if (not $value and $field eq 'Packager') {
	    $value = $ENV{COFIN_NAME} || getlogin() . '@' . hostname();
	}

	next unless $value;

	$metadata .= "$field: $value\n";
    }

    $metadata .= sprintf "Built: %d\n", time();
    $metadata .= sprintf "VCS: %s\n", $VCS;

    $nail->add_data(SUMSFILE, $checksums);
    $nail->add_data(METAFILE, $metadata);
    $nail->add_data(VERSIONFILE, "$name $tag");

    $nail->write($outfilename, 1);

    copy $outfilename, "$cwd/$outfilename" or die "Could not copy `$outfilename' to `$cwd/$outfilename`: $!\n";
    
    my $tmpdir = cwd();
    chdir '/tmp';
    rmtree $tmpdir or die "Could not clean up `$tmpdir': $!\n";
}

sub remove_package {
    my ($destdir) = @_;

    if ($destdir) {
	chdir $destdir;
    }

    die "No version file found in current directory\n" unless -f VERSIONFILE; 
    die "No checksums file found in current directory\n" unless -f SUMSFILE;

    open my $vfh, '<', VERSIONFILE or die "Could not open versions file: `$!'\n";
    my $line = <$vfh>;
    chomp $line;
    my ($name, $previous) = split ' ', $line, 2;
    print STDERR "Removing package $name version $previous\n";
    close $vfh;
    
    my @files = ();
    my @dirs = ();

    my $mismatch = 0;

    open my $fh, '<', SUMSFILE or die "Could not open sums file: `$!'\n";
    while (my $line = <$fh>) {
	chomp $line;

	my ($checksum, $filename) = split ' ', $line, 2;
	if ($checksum eq 'DIR') {
	    push @dirs, $filename;
	    next;
	}

	if (-f $filename && checksum($filename) ne $checksum) {
	    print STDERR "$filename has been locally modified!\n";
	    $mismatch = 1;
	}

	push @files, $filename;
    }

    if ($mismatch) {
	if ($FORCE) {
	    print STDERR "Forcing removal of locally modified files\n";
	} else {
	    print STDERR "Locally modified files found, use --force to continue\n";
	    exit -1;
	}
    }

    foreach my $file (@files, VERSIONFILE, SUMSFILE, METAFILE) {
	unlink $file or warn "Could not remove `$file' $!\n";
    }

    foreach my $dir (sort {length $b <=> length $a} @dirs) {
	rmdir $dir or warn "Could not remove directory `$dir': $!\n";
    }
}

sub install_package {
    my ($filename, $destdir) = @_;

    my $nail = open_package($filename);
    die "Package `$filename' not found\n" unless $nail;

    if ($destdir) {
	mkpath $destdir unless -d $destdir;
	chdir $destdir;
    }

    my %package_checksums = get_package_checksums($nail);

    if (-f VERSIONFILE) {
	open my $fh, '<', VERSIONFILE or die "Could not open versions file: `$!'\n";
	my $line = <$fh>;
	chomp $line;
	my ($name, $previous) = split ' ', $line, 2;

	my ($package, $version) = get_package_info($nail);

	die "Trying to upgrade an installation of `$name' with a package of `$package', cannot continue\n" unless $package eq $name;

	print STDERR "Upgrading `$package' from version $previous to $version\n";
	close $fh;
    } else {
	print STDERR "New installation\n";
    }


    if (-f VERSIONFILE) {
	open my $fh, '<', SUMSFILE or die "Could not open sums file: `$!'\n";
    }

    if (-f SUMSFILE) {
	open my $fh, '<', SUMSFILE or die "Could not open sums file: `$!'\n";

	my $mismatch = 0;

	while (my $line = <$fh>) {
	    chomp $line;

	    my ($checksum, $filename) = split ' ', $line, 2;
	    my $file_checksum = checksum($filename); 

	    if ($checksum eq 'DIR') {
		next;
	    }

	    if (-f $filename && $file_checksum ne $checksum) {
		if ($file_checksum eq $package_checksums{$filename}) {
		    print STDERR "$filename has been locally modified but matches package\n";
		} else {
		    print STDERR "$filename has been locally modified!\n";
		    $mismatch = 1;
		}
	    }
	}
	close $fh;

	if ($mismatch) {
	    if ($FORCE) {
		print STDERR "Forcing overwrite of locally modified files\n";
	    } else {
		print STDERR "Locally modified files found, use --force to continue\n";
		exit -1;
	    }
	}
    }

    $nail->extract();
}

sub list_package {
    my ($filename) = @_;

    die "No package specified\n" unless $filename;
    my $nail = open_package($filename);
    die "Package `$filename' not found\n" unless $nail;

    my @files = $nail->list_files(); 

    my ($name, $version) = get_package_info($nail);

    my %checksums = get_package_checksums($nail);

    print STDERR "\nPackage: $name\nVersion: $version\n\n\n";
    foreach my $file (@files) {
	my $display = $file;

	next if is_package_file($file);

	if ($file =~ /^\.\//) {
	    $display =~ s/^\.\///; 
	} else {
	    $display = $file;
	    $file = "./$file";
	}

	my $checksum = $checksums{$file} || 'NOT FOUND';

	printf STDERR "%-32s\t%s\n", $checksum, $display;
    }

    print STDERR "\n";
}

sub diff_package {
    my ($filename, @files) = @_;

    die "No package specified\n" unless $filename;
    my $nail = open_package($filename);
    die "Package `$filename' not found\n" unless $nail;

    my $use_shell_diff = 0;
    
    eval {
	require Text::Diff;
    };

    if ($@) {
	if ($FORCE) {
	    print STDERR "Using shell diff\n";
	    $use_shell_diff = 1; 
	} else {
	    die "Text::Diff is not installed, use --force to fallback to shell diff\n";
	}
    }


    @files = @files ? @files : $nail->list_files();

    my ($name, $version) = get_package_info($nail);
    my %checksums = get_package_checksums($nail);

    foreach my $file (@files) {
	next if is_package_file($file);

	unless (-e $file) {
	    print "File `$file' not found\n";
	    next;
	}

	if ($file !~ /^\.\//) {
	    $file = "./$file";
	}

	my $checksum = $checksums{$file};

	if ($checksum ne checksum($file)) {
	    my $content;

	    if ($nail->contains_file($file)) {
		$content = $nail->get_content($file);
	    } else {
		(my $newfile = $file) =~ s/^\.\///;
		$content = $nail->get_content($newfile);
	    }

	    if (-B $file) {
		print "Binary file $file differs\n";
		next;
	    }

	    if ($use_shell_diff) {
		my $tmp = File::Temp->new();

		print $tmp $content;
		close $tmp;

		my $name = $tmp->filename();

		my ($left, $right) = $REVERSE ? ($file, $name) : ($name, $file);

		my $diff = `diff -u $left $right`;
		$diff =~ s/$name/$file/g;
		print $diff;
	    } else {
		my ($left, $right) = $REVERSE ? ($file, \$content) : (\$content, $file);

		my $diff = Text::Diff::diff($left, $right, {STYLE => 'Unified'});
		print "--- $file\n";
		print "+++ $file\n";
		print $diff;
	    }
	}
    }
}

sub status_package {
    die "No checksums file found in current directory\n" unless -f SUMSFILE;

    my %checksums = ();

    {
	open my $fh, '<', VERSIONFILE or die "Could not open version file: $!\n";

	my $versiondata = <$fh>;

	chomp $versiondata;
	my ($name, $version) = split ' ', $versiondata, 2;

	close $fh;

	print STDERR "\nPackage: $name\nVersion: $version\n\n\n";
    }

    open my $fh, '<', SUMSFILE or die "Could not open sums file: $!\n";
    while (my $line = <$fh>) {
	chomp $line;

        my ($checksum, $file) = split ' ', $line, 2;

        $checksums{$file} = $checksum;	
    }

    my %files = ();

    find(
	sub {
	    my $curfile = $File::Find::name;
	    my $curdir = $File::Find::dir;

	    return if is_package_file($_);

	    return if $curfile eq '.' || $curfile eq './';

	    $files{$curfile} = 1;
	},
	'.'
    );

    foreach my $file (keys %checksums) {
	$files{$file} = 1;
    }

    foreach my $file (sort keys %files) {
	my $checksum = $checksums{$file};

	(my $display = $file) =~ s/^\.\///; 

	unless ($checksum) {
	    print STDERR "$display not known to package\n";
	    next;
	}

	unless (-e $file) {
	    print STDERR "$display is missing\n";
	    next;
	}

	if ($checksum eq checksum($file)) {
	    print STDERR "$display up-to-date\n";
	    next;
	} else {
	    print STDERR "$display locally modified\n";
	}
    }

    print STDERR "\n";
}

sub info_package {
    my ($filename) = @_;

    die "No package specified\n" unless $filename;
    my $nail = open_package($filename);
    die "Package `$filename' not found\n" unless $nail;

    my ($package, $version) = get_package_info($nail);
    my %meta = get_package_meta($nail);

    print STDERR "Name: $package\n";
    print STDERR "Version: $version\n";
    foreach my $field (@META_FIELDS, 'VCS') {
	my $value = $meta{$field} || '<Not Set>';

	print STDERR "$field: $value\n";
    }

    printf STDERR "Built: %s\n", scalar localtime($meta{Built}||0);
}

sub checksum {
    my ($filename) = @_;

    return 'DIR' if -d $filename;

    my $ctx = Digest::MD5->new;

    $filename = "./$filename" unless $filename =~ /^\.\//;;

    open my $fh, '<', $filename or die "Could not open `$filename': $!\n";
    $ctx->addfile($fh);
    my $digest = $ctx->hexdigest();
    close $fh;

    return $digest;
}

sub get_package_info {
    my ($nail) = @_;

    my $versiondata = $nail->get_content(VERSIONFILE);
    chomp $versiondata;

    my ($package, $version) = split ' ', $versiondata, 2;
    
    return ($package, $version);
}

sub get_package_meta {
    my ($nail) = @_;

    my $metadata = $nail->get_content(METAFILE)||'';

    my $fields = join '|', (@META_FIELDS, @META_RO); 

    my %meta = map {$_ =~ /^($fields)\:\s*(.+?)$/} split "\r?\n", $metadata;
    
    return %meta;
}

sub get_package_checksums {
    my ($nail) = @_;

    my %checksums = ();

    my $sumdata = $nail->get_content(SUMSFILE);

    foreach my $line (split "\r?\n", $sumdata) {
	my ($checksum, $file) = split ' ', $line, 2;

	$checksums{$file} = $checksum;
    }

    return %checksums;
}

sub open_package {
    my ($path) = @_;

    my $nail;
    if ($path =~ /^(https?|ftp):\/\//) {
        require LWP::UserAgent;
	require IO::Uncompress::Gunzip;

        my $ua = LWP::UserAgent->new();
        $ua->timeout(10);

        my $response = $ua->get($path);

        if ($response->is_success()) {
	    my $content = $response->content();
	    $nail = Archive::Tar->new();
	    open my $fh, '<', \$content;
	    $nail->read(IO::Uncompress::Gunzip->new($fh));
        }
        else {
            die "Error retrieving `$path': ", $response->status_line(), "\n";
        }
    } elsif ($path =~ /^s(sh|ftp):\/\/(?:([^\@]+?)@)?([^\/\:]+?)(?:\:(\d+))?\/(.+?)$/) {
        require Net::SFTP::Foreign;
        require IO::Uncompress::Gunzip;

	my $sftp = Net::SFTP::Foreign->new(
	    user => $2,
	    host => $3,
	    port => $4,
	);

	my $content = $sftp->get_content("$5") || $sftp->get_content("/$5");

        $nail = Archive::Tar->new();
        open my $fh, '<', \$content;
        $nail->read(IO::Uncompress::Gunzip->new($fh));	
    } else { 
	$nail = Archive::Tar->new($path);
    }

    return $nail;
}

sub is_package_file {
    my ($file) = @_;

    return $file eq SUMSFILE || $file eq VERSIONFILE || $file eq METAFILE;
}

